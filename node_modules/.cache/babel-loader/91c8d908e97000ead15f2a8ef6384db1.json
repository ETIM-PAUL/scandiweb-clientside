{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nconst initialState = {\n  cartItems: localStorage.getItem(\"cartItems\") ? JSON.parse(localStorage.getItem(\"cartItems\")) : [],\n  cartTotalQuantity: 0,\n  cartTotalAmount: 0\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart(state, _ref) {\n      let {\n        payload,\n        type\n      } = _ref;\n      const existingIndex = state.cartItems.findIndex(item => item.id === payload.id);\n\n      if (existingIndex >= 0) {\n        state.cartItems[existingIndex] = { ...state.cartItems[existingIndex],\n          cartQuantity: state.cartItems[existingIndex].cartQuantity += 1\n        };\n        toast.info(`${payload.name} quantity increased`, {\n          position: \"top-center\"\n        });\n      } else {\n        let tempProductItem = { ...payload,\n          cartQuantity: 1,\n          imageIndex: 0\n        };\n        state.cartItems.push(tempProductItem);\n        toast.success(`${payload.name} added to cart`, {\n          position: \"top-center\"\n        });\n      }\n\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n\n    decreaseCart(state, _ref2) {\n      let {\n        payload,\n        type\n      } = _ref2;\n      const itemIndex = state.cartItems.findIndex(item => item.id === payload.id);\n\n      if (state.cartItems[itemIndex].cartQuantity > 1) {\n        state.cartItems[itemIndex].cartQuantity -= 1;\n        toast.info(`${payload.name} quantity decreased in cart`, {\n          position: \"top-center\"\n        });\n      } else if (state.cartItems[itemIndex].cartQuantity === 1) {\n        const nextCartItems = state.cartItems.filter(item => item.id !== payload.id);\n        state.cartItems = nextCartItems;\n        toast.error(`${payload.name} removed from cart`, {\n          position: \"top-center\"\n        });\n      }\n\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n\n    getTotals(state, action) {\n      let {\n        total,\n        quantity\n      } = state.cartItems.reduce((cartTotal, cartItem) => {\n        const {\n          cartQuantity,\n          gallery,\n          prices\n        } = cartItem;\n        const p = [...prices];\n        const itemTotal = 1 * cartQuantity;\n        cartTotal.total += itemTotal;\n        cartTotal.quantity += cartQuantity;\n        console.log(p);\n        return cartTotal;\n      }, {\n        total: 0,\n        quantity: 0\n      });\n      total = parseFloat(total.toFixed(2));\n      state.cartTotalQuantity = quantity;\n      state.cartTotalAmount = total;\n    },\n\n    getPrice(state, action) {\n      const {\n        payload\n      } = action; // payload ==> currency\n\n      let totalPrice = 0;\n      state.cartItems.forEach(i => {\n        const amount = i.prices.filter(x => x.label === payload)[0].amount;\n        totalPrice += amount * i.cartQuantity;\n      });\n      state.cartTotalAmount = totalPrice; // return totalPrice\n    },\n\n    getTotalAmount(state, action) {\n      let total = state.cartItems.prices[0].amount; // let { total, quantity } = state.cartItems.reduce(\n      //   (cartTotal:any, cartItem:any) => {\n      //     const {cartQuantity } = cartItem;\n      //     const itemTotal = 1 * cartQuantity;\n      //     cartTotal.total += itemTotal;\n      //     cartTotal.quantity += cartQuantity;\n      //     return cartTotal;\n      //   },\n      //   {\n      //     total: 0,\n      //     quantity: 0,\n      //   }\n      //   );\n      //   total = parseFloat(total.toFixed(2));\n      //   state.cartTotalQuantity = quantity;\n      //   state.cartTotalAmount = total;\n    }\n\n  }\n});\nexport const {\n  addToCart,\n  decreaseCart,\n  getTotals,\n  getPrice\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/Users/admin/Documents/product-cart/products-cart/src/redux/cartSlice.ts"],"names":["createSlice","toast","initialState","cartItems","localStorage","getItem","JSON","parse","cartTotalQuantity","cartTotalAmount","cartSlice","name","reducers","addToCart","state","payload","type","existingIndex","findIndex","item","id","cartQuantity","info","position","tempProductItem","imageIndex","push","success","setItem","stringify","decreaseCart","itemIndex","nextCartItems","filter","error","getTotals","action","total","quantity","reduce","cartTotal","cartItem","gallery","prices","p","itemTotal","console","log","parseFloat","toFixed","getPrice","totalPrice","forEach","i","amount","x","label","getTotalAmount","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\n\n\nconst initialState = {\n  cartItems: localStorage.getItem(\"cartItems\")\n    ? JSON.parse(localStorage.getItem(\"cartItems\")!)\n    : [],\n  cartTotalQuantity: 0,\n  cartTotalAmount: 0,\n};\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart(state, {payload,type}) {\n      const existingIndex = state.cartItems.findIndex(\n        (item:any) => item.id === payload.id\n      );\n\n      if (existingIndex >= 0) {\n        state.cartItems[existingIndex] = {\n          ...state.cartItems[existingIndex],\n          cartQuantity: state.cartItems[existingIndex].cartQuantity += 1,\n        };\n        toast.info(`${payload.name} quantity increased`, {\n          position: \"top-center\",\n        })\n      } else {\n        let tempProductItem = { ...payload, cartQuantity: 1, imageIndex: 0 };\n        state.cartItems.push(tempProductItem);\n        toast.success(`${payload.name} added to cart`, {\n          position: \"top-center\",\n        })\n      }\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n    decreaseCart(state, {payload, type}) {\n      const itemIndex = state.cartItems.findIndex(\n        (item:any) => item.id === payload.id\n      );\n\n      if (state.cartItems[itemIndex].cartQuantity > 1) {\n        state.cartItems[itemIndex].cartQuantity -= 1;\n\n        toast.info(`${payload.name} quantity decreased in cart`, {\n          position: \"top-center\",\n      })\n      } else if (state.cartItems[itemIndex].cartQuantity === 1) {\n        const nextCartItems = state.cartItems.filter(\n          (item:any) => item.id !== payload.id\n        );\n\n        state.cartItems = nextCartItems;\n\n        toast.error(`${payload.name} removed from cart`, {\n          position: \"top-center\",\n        })\n      }\n\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n    getTotals(state, action) {\n      let { total, quantity } = state.cartItems.reduce(\n        (cartTotal:any, cartItem:any) => {\n          const {cartQuantity, gallery, prices } = cartItem;\n          const p = [...prices]\n          const itemTotal = 1 * cartQuantity;\n          cartTotal.total += itemTotal;\n          cartTotal.quantity += cartQuantity;\n          \n          console.log(p)\n          return cartTotal;\n        },\n        {\n          total: 0,\n          quantity: 0,\n        }\n        );\n        total = parseFloat(total.toFixed(2));\n        state.cartTotalQuantity = quantity;\n        state.cartTotalAmount = total\n      },\n\n      getPrice(state, action) {\n        const {payload} =  action // payload ==> currency\n        let totalPrice = 0;\n        state.cartItems.forEach((i: any) => {\n          const amount = i.prices.filter((x: any) => x.label === payload)[0].amount\n          totalPrice += amount * i.cartQuantity\n        })\n        state.cartTotalAmount = totalPrice;\n        // return totalPrice\n      },\n      \n      getTotalAmount(state, action) {\n        let total = state.cartItems.prices[0].amount;\n      // let { total, quantity } = state.cartItems.reduce(\n      //   (cartTotal:any, cartItem:any) => {\n      //     const {cartQuantity } = cartItem;\n      //     const itemTotal = 1 * cartQuantity;\n      //     cartTotal.total += itemTotal;\n      //     cartTotal.quantity += cartQuantity;\n          \n      //     return cartTotal;\n      //   },\n      //   {\n      //     total: 0,\n      //     quantity: 0,\n      //   }\n      //   );\n      //   total = parseFloat(total.toFixed(2));\n      //   state.cartTotalQuantity = quantity;\n      //   state.cartTotalAmount = total;\n    },\n  },\n});\n\nexport const { addToCart, decreaseCart,  getTotals, getPrice } =\n  cartSlice.actions;\n\nexport default cartSlice.reducer;"]},"metadata":{},"sourceType":"module"}