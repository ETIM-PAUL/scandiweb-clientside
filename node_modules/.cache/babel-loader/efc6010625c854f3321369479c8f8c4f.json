{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/product-cart/products-cart/src/components/Products-Listing/index.tsx\";\nimport React from \"react\";\nimport { gql } from \"@apollo/client\";\nimport { FirstContainer, Heading, CardsContainer, Card, WaterMark, CardTitle, Cart, Banner } from \"../../styles/productsListing\";\nimport { connect } from \"react-redux\";\nimport { client } from \"../../App\";\nimport { BsCart } from \"react-icons/bs\";\nimport { Link } from \"react-router-dom\"; // import { mapDispatchToProps } from \"../../redux/redux-functions\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass ProductsListing extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      products: [],\n      num: 0\n    };\n  }\n\n  componentDidMount() {\n    let currency = this.props.currency;\n    let category = this.props.category;\n    client.query({\n      query: gql`\n          query category {\n            category(input: { title: \"${category}\" }) {\n              name\n              products {\n                id\n                name\n                inStock\n                gallery\n                description\n                category\n                brand\n                attributes {\n                  id\n                  name\n                  type\n                  items {\n                    displayValue\n                    value\n                    id\n                  }\n                }\n                prices {\n                  currency {\n                    label\n                    symbol\n                  }\n                  amount\n                }\n              }\n            }\n          }\n        `\n    }).then(result => this.setState({\n      products: result.data.category.products\n    }));\n  }\n\n  componentDidUpdate(prevState) {\n    let currency = this.props.currency;\n    let category = this.props.category;\n\n    if (prevState.category !== category || prevState.currency !== currency) {}\n  }\n\n  render() {\n    let numm = this.state.num;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(FirstContainer, {\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          children: \"All Categories\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardsContainer, {\n          children: this.state.products.length >= 0 && this.state.products.map(x => /*#__PURE__*/_jsxDEV(Card, {\n            children: [/*#__PURE__*/_jsxDEV(Banner, {\n              children: [x.inStock === false && /*#__PURE__*/_jsxDEV(WaterMark, {\n                children: \"Out of stock\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: x.gallery[0],\n                height: 250,\n                width: 250,\n                alt: \"Product Img\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Link, {\n                to: `/product/${x.id}`,\n                children: /*#__PURE__*/_jsxDEV(Cart, {\n                  children: /*#__PURE__*/_jsxDEV(BsCart, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 104,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 103,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(CardTitle, {\n              children: x.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                paddingTop: \"5px\"\n              },\n              children: [x.prices[numm].currency.symbol, x.prices[numm].amount, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 19\n            }, this)]\n          }, x.name, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nexport function mapStateToProps(state) {\n  return {\n    category: state.action[\"selectedCategory\"],\n    currency: state.action[\"selectedCurrency\"]\n  };\n}\nexport default connect(mapStateToProps, null)(ProductsListing);","map":{"version":3,"sources":["/Users/admin/Documents/product-cart/products-cart/src/components/Products-Listing/index.tsx"],"names":["React","gql","FirstContainer","Heading","CardsContainer","Card","WaterMark","CardTitle","Cart","Banner","connect","client","BsCart","Link","ProductsListing","Component","constructor","props","state","products","num","componentDidMount","currency","category","query","then","result","setState","data","componentDidUpdate","prevState","render","numm","length","map","x","inStock","gallery","id","name","paddingTop","prices","symbol","amount","mapStateToProps","action"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { gql } from \"@apollo/client\";\nimport {\n  FirstContainer,\n  Heading,\n  CardsContainer,\n  Card,\n  WaterMark,\n  CardTitle,\n  Cart,\n  Banner,\n} from \"../../styles/productsListing\";\nimport { connect } from \"react-redux\";\nimport { client } from \"../../App\";\nimport { CardPropsTypes } from \"../../types\";\nimport { BsCart } from \"react-icons/bs\";\nimport { Link } from \"react-router-dom\";\n// import { mapDispatchToProps } from \"../../redux/redux-functions\";\n\nclass ProductsListing extends React.Component<\n  { category: string; currency: string },\n  { products: []; num: number }\n> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      products: [],\n      num: 0,\n    };\n  }\n  componentDidMount() {\n    let currency = this.props.currency;\n    let category = this.props.category;\n    client\n      .query({\n        query: gql`\n          query category {\n            category(input: { title: \"${category}\" }) {\n              name\n              products {\n                id\n                name\n                inStock\n                gallery\n                description\n                category\n                brand\n                attributes {\n                  id\n                  name\n                  type\n                  items {\n                    displayValue\n                    value\n                    id\n                  }\n                }\n                prices {\n                  currency {\n                    label\n                    symbol\n                  }\n                  amount\n                }\n              }\n            }\n          }\n        `,\n      })\n      .then((result) =>\n        this.setState({\n          products: result.data.category.products,\n        })\n      );\n  }\n\n  componentDidUpdate(prevState: any) {\n    let currency = this.props.currency;\n    let category = this.props.category;\n    if (prevState.category !== category || prevState.currency !== currency) {\n    }\n  }\n\n  render() {\n    let numm = this.state.num;\n    return (\n      <>\n        <FirstContainer>\n          <Heading>All Categories</Heading>\n          <CardsContainer>\n            {this.state.products.length >= 0 &&\n              this.state.products.map((x: CardPropsTypes) => (\n                <Card key={x.name}>\n                  <Banner>\n                    {x.inStock === false && <WaterMark>Out of stock</WaterMark>}\n                    <img\n                      src={x.gallery[0]}\n                      height={250}\n                      width={250}\n                      alt=\"Product Img\"\n                    />\n                    <Link to={`/product/${x.id}`}>\n                      <Cart>\n                        <BsCart />\n                      </Cart>\n                    </Link>\n                  </Banner>\n\n                  <CardTitle>{x.name}</CardTitle>\n                  <div style={{ paddingTop: \"5px\" }}>\n                    {x.prices[numm].currency.symbol}\n                    {x.prices[numm].amount}\n                    <br />\n                  </div>\n                </Card>\n              ))}\n          </CardsContainer>\n        </FirstContainer>\n      </>\n    );\n  }\n}\n\nexport function mapStateToProps(state: any) {\n  return {\n    category: state.action[\"selectedCategory\"],\n    currency: state.action[\"selectedCurrency\"],\n  };\n}\n\nexport default connect(mapStateToProps, null)(ProductsListing);\n"]},"metadata":{},"sourceType":"module"}