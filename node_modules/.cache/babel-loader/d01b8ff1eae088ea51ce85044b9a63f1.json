{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/product-cart/products-cart/src/components/TopNav/index.tsx\";\nimport React from \"react\";\nimport { BsCart } from \"react-icons/bs\";\nimport { TopHeading, Item, Logo, Menu, SingleIcon, DropDownContent, DropItem } from \"../../styles/topNav\";\nimport { connect } from \"react-redux\";\nimport { setCategory, setCurrency } from \"../../redux/selectSlice\";\nimport { Link } from \"react-router-dom\";\nimport { Get_Category, Get_Currency } from \"../../queries\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass TopNav extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      products: [],\n      categories: [],\n      category: \"all\",\n      currencies: [],\n      currency: \"USD\"\n    };\n  }\n\n  selectedCategoryTitle(title) {\n    this.setState({\n      category: title\n    });\n    this.props.setCategory(title);\n  }\n\n  selectedCurrencyType(currency) {\n    this.setState({\n      currency: currency\n    });\n    this.props.setCurrency(currency);\n  }\n\n  componentDidMount() {\n    let category = this.state.category;\n    let currency = this.state.currency;\n    Get_Category().then(result => this.setState({\n      categories: result.data.categories\n    }));\n    Get_Currency().then(result => this.setState({\n      currencies: result.data.currencies\n    }));\n    this.props.setCategory(category);\n    this.props.setCurrency(currency.toString());\n  }\n\n  render() {\n    var _this$state$categorie, _this$state$currencie;\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(TopHeading, {\n        children: [/*#__PURE__*/_jsxDEV(Menu, {\n          children: this.state.categories.length > 0 && ((_this$state$categorie = this.state.categories) === null || _this$state$categorie === void 0 ? void 0 : _this$state$categorie.map(cat => /*#__PURE__*/_jsxDEV(Item, {\n            id: cat.name,\n            onClick: e => this.selectedCategoryTitle(e.target.id),\n            children: cat.name\n          }, cat.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 17\n          }, this)))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Logo, {\n          children: \"Logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: \"/cart\",\n            children: /*#__PURE__*/_jsxDEV(SingleIcon, {\n              children: [/*#__PURE__*/_jsxDEV(BsCart, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  backgroundColor: \"green\",\n                  borderRadius: \"50%\",\n                  fontSize: \"15px\"\n                },\n                children: \"5\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SingleIcon, {\n            children: /*#__PURE__*/_jsxDEV(DropDownContent, {\n              onChange: e => this.selectedCurrencyType(e.target.value),\n              children: this.state.currencies.length > 0 && ((_this$state$currencie = this.state.currencies) === null || _this$state$currencie === void 0 ? void 0 : _this$state$currencie.map(cur => /*#__PURE__*/_jsxDEV(DropItem, {\n                id: cur.symbol,\n                value: cur.label.toString(),\n                children: [cur.symbol, \" \", \"\", \" \", cur.label]\n              }, cur.symbol, true, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 21\n              }, this)))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setCategory: category => dispatch(setCategory(category)),\n    setCurrency: currency => dispatch(setCurrency(currency))\n  };\n}\n\nexport default connect(null, mapDispatchToProps)(TopNav);","map":{"version":3,"sources":["/Users/admin/Documents/product-cart/products-cart/src/components/TopNav/index.tsx"],"names":["React","BsCart","TopHeading","Item","Logo","Menu","SingleIcon","DropDownContent","DropItem","connect","setCategory","setCurrency","Link","Get_Category","Get_Currency","TopNav","Component","constructor","props","state","products","categories","category","currencies","currency","selectedCategoryTitle","title","setState","selectedCurrencyType","componentDidMount","then","result","data","toString","render","length","map","cat","name","e","target","id","backgroundColor","borderRadius","fontSize","value","cur","symbol","label","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { BsCart } from \"react-icons/bs\";\nimport {\n  TopHeading,\n  Item,\n  Logo,\n  Menu,\n  SingleIcon,\n  DropDownContent,\n  DropItem,\n} from \"../../styles/topNav\";\nimport { client } from \"../../App\";\nimport { connect } from \"react-redux\";\nimport { setCategory, setCurrency } from \"../../redux/selectSlice\";\nimport { TopNavTypes } from \"../../types\";\nimport { Link } from \"react-router-dom\";\nimport { Get_Category, Get_Currency } from \"../../queries\";\n\nclass TopNav extends React.Component<\n  { setCategory: any; setCurrency: any },\n  TopNavTypes\n> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      products: [],\n      categories: [],\n      category: \"all\",\n      currencies: [],\n      currency: \"USD\",\n    };\n  }\n  selectedCategoryTitle(title: string) {\n    this.setState({ category: title });\n    this.props.setCategory(title);\n  }\n\n  selectedCurrencyType(currency: string) {\n    this.setState({ currency: currency });\n    this.props.setCurrency(currency);\n  }\n\n  componentDidMount() {\n    let category = this.state.category;\n    let currency = this.state.currency;\n\n    Get_Category().then((result) =>\n      this.setState({ categories: result.data.categories })\n    );\n\n    Get_Currency().then((result) =>\n      this.setState({ currencies: result.data.currencies })\n    );\n    this.props.setCategory(category);\n    this.props.setCurrency(currency.toString());\n  }\n\n  render() {\n    return (\n      <>\n        <TopHeading>\n          <Menu>\n            {this.state.categories.length > 0 &&\n              this.state.categories?.map((cat: any) => (\n                <Item\n                  key={cat.name}\n                  id={cat.name}\n                  onClick={(e: any) => this.selectedCategoryTitle(e.target.id)}\n                >\n                  {cat.name}\n                </Item>\n              ))}\n          </Menu>\n\n          <Logo>Logo</Logo>\n\n          <div>\n            <Link to={\"/cart\"}>\n              <SingleIcon>\n                <BsCart />\n                <span\n                  style={{\n                    backgroundColor: \"green\",\n                    borderRadius: \"50%\",\n                    fontSize: \"15px\",\n                  }}\n                >\n                  5\n                </span>\n              </SingleIcon>\n            </Link>\n\n            <SingleIcon>\n              <DropDownContent\n                onChange={(e: any) => this.selectedCurrencyType(e.target.value)}\n              >\n                {this.state.currencies.length > 0 &&\n                  this.state.currencies?.map((cur: any) => (\n                    <DropItem\n                      key={cur.symbol}\n                      id={cur.symbol}\n                      value={cur.label.toString()}\n                    >\n                      {cur.symbol} {\"\"} {cur.label}\n                    </DropItem>\n                  ))}\n              </DropDownContent>\n            </SingleIcon>\n          </div>\n        </TopHeading>\n      </>\n    );\n  }\n}\n\nfunction mapDispatchToProps(dispatch: any) {\n  return {\n    setCategory: (category: string) => dispatch(setCategory(category)),\n    setCurrency: (currency: string) => dispatch(setCurrency(currency)),\n  };\n}\n\nexport default connect(null, mapDispatchToProps)(TopNav);\n"]},"metadata":{},"sourceType":"module"}