{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nconst initialState = {\n  cartItems: localStorage.getItem(\"cartItems\") ? JSON.parse(localStorage.getItem(\"cartItems\")) : [],\n  cartTotalQuantity: 0,\n  cartTotalAmount: 0\n};\n\nconst compareItemAttributes = (object1, object2) => {\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (let key of keys1) {\n    if (object1[key] !== object2[key]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart: (state, _ref) => {\n      let {\n        payload,\n        type\n      } = _ref;\n      const exist = state.cartItems.find(item => item.id === payload.product.id);\n\n      if (exist) {\n        const existingItemIndex = state.cartItems.findIndex(item => item.id === payload.product.id && compareItemAttributes(item.selectedAttributes, payload.attribute));\n        const existingItem = state.cartItems.find(item => item.id === payload.product.id && compareItemAttributes(item.selectedAttributes, payload.attribute));\n\n        if (!existingItem) {\n          let tempProductItem = { ...payload.product,\n            selectedAttributes: payload.attribute\n          };\n          state.cartItems.push(tempProductItem);\n          toast.success(`${payload.product.name} added again to cart with different attributes`, {\n            position: \"top-center\"\n          });\n        } else if (existingItem) {\n          state.cartItems[existingItemIndex] = { ...state.cartItems[existingItemIndex],\n            cartQuantity: state.cartItems[existingItemIndex].cartQuantity += 1\n          };\n          toast.info(`${payload.product.name} quantity increased`, {\n            position: \"top-center\"\n          });\n        }\n      } else {\n        let tempProductItem = { ...payload.product,\n          cartQuantity: 1,\n          imageIndex: 0,\n          selectedAttributes: payload.attribute\n        };\n        state.cartItems.push(tempProductItem);\n        toast.success(`${payload.product.name} added  to cart`, {\n          position: \"top-center\"\n        });\n      }\n\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n\n    decreaseCart(state, _ref2) {\n      let {\n        payload,\n        type\n      } = _ref2;\n      const itemIndex = state.cartItems.findIndex(item => item.id === payload.product.id && compareItemAttributes(item.selectedAttributes, payload.attribute));\n\n      if (state.cartItems[itemIndex].cartQuantity > 1) {\n        state.cartItems[itemIndex].cartQuantity -= 1;\n        toast.info(`${payload.name} quantity decreased in cart`, {\n          position: \"top-center\"\n        });\n      } else if (state.cartItems[itemIndex].cartQuantity === 1) {\n        // const nextCartItems = state.cartItems.filter(\n        //   (item:any) => item.id !== payload.product.id && compareItemAttributes(item.selectedAttributes,payload.attribute)\n        // );\n        // state.cartItems = nextCartItems;\n        state.cartItems.pop(state.cartItems[itemIndex]);\n        toast.error(`${payload.name} removed from cart`, {\n          position: \"top-center\"\n        });\n      }\n\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n\n    getTotals(state) {\n      let totalPrice = 0;\n      let total = 0;\n      let {\n        quantity\n      } = state.cartItems.reduce((cartTotal, cartItem) => {\n        const {\n          cartQuantity\n        } = cartItem;\n        cartTotal.quantity += cartQuantity;\n        return cartTotal;\n      }, {\n        quantity: 0\n      });\n      state.cartItems.forEach(i => {\n        const pricesProxy = JSON.parse(JSON.stringify(i.prices));\n        const amount = pricesProxy.filter(x => x.currency.symbol === localStorage.getItem(\"currency\"))[0];\n        total += amount.amount * i.cartQuantity;\n      });\n      totalPrice = parseFloat(total.toFixed(2));\n      state.cartTotalAmount = totalPrice;\n      state.cartTotalQuantity = quantity;\n    },\n\n    changeImageIndexUp(state, _ref3) {\n      let {\n        payload,\n        type\n      } = _ref3;\n      const existingIndex = state.cartItems.findIndex(item => item.id === payload.id);\n\n      if (existingIndex >= 0) {\n        if (state.cartItems[existingIndex].imageIndex === payload.gallery.length - 1) {\n          state.cartItems[existingIndex].imageIndex = 0;\n        } else if (state.cartItems[existingIndex].imageIndex >= 0) {\n          state.cartItems[existingIndex].imageIndex += 1;\n        }\n      }\n    },\n\n    changeImageIndexDown(state, _ref4) {\n      let {\n        payload,\n        type\n      } = _ref4;\n      const existingIndex = state.cartItems.findIndex(item => item.id === payload.id);\n\n      if (existingIndex >= 0) {\n        if (state.cartItems[existingIndex].imageIndex > 0) {\n          state.cartItems[existingIndex].imageIndex -= 1;\n        } else if (state.cartItems[existingIndex].imageIndex === 0) {\n          state.cartItems[existingIndex].imageIndex = payload.gallery.length - 1;\n        }\n      }\n    }\n\n  }\n});\nexport const {\n  addToCart,\n  decreaseCart,\n  getTotals,\n  changeImageIndexUp,\n  changeImageIndexDown\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/Users/admin/Documents/product-cart/products-cart/src/redux/cartSlice.ts"],"names":["createSlice","toast","initialState","cartItems","localStorage","getItem","JSON","parse","cartTotalQuantity","cartTotalAmount","compareItemAttributes","object1","object2","keys1","Object","keys","keys2","length","key","cartSlice","name","reducers","addToCart","state","payload","type","exist","find","item","id","product","existingItemIndex","findIndex","selectedAttributes","attribute","existingItem","tempProductItem","push","success","position","cartQuantity","info","imageIndex","setItem","stringify","decreaseCart","itemIndex","pop","error","getTotals","totalPrice","total","quantity","reduce","cartTotal","cartItem","forEach","i","pricesProxy","prices","amount","filter","x","currency","symbol","parseFloat","toFixed","changeImageIndexUp","existingIndex","gallery","changeImageIndexDown","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\n\n\nconst initialState = {\n  cartItems: localStorage.getItem(\"cartItems\")\n    ? JSON.parse(localStorage.getItem(\"cartItems\")!)\n    : [],\n  cartTotalQuantity: 0,\n  cartTotalAmount: 0,\n};\n\nconst compareItemAttributes = (object1:any, object2:any) => {\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n  for (let key of keys1) {\n    if (object1[key] !== object2[key]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart: (state, {payload,type}) => {\n      const exist = state.cartItems.find(\n        (item:any) => item.id === payload.product.id\n        );\n        if (exist) {\n          const existingItemIndex = state.cartItems.findIndex(\n            (item:any) => item.id === payload.product.id && compareItemAttributes(item.selectedAttributes,payload.attribute)\n          );\n          const existingItem = state.cartItems.find(\n            (item:any) => item.id === payload.product.id && compareItemAttributes(item.selectedAttributes,payload.attribute)\n            );\n        if(!existingItem) \n        { \n          let tempProductItem = { ...payload.product, selectedAttributes:payload.attribute };\n          state.cartItems.push(tempProductItem);\n          toast.success(`${payload.product.name} added again to cart with different attributes`, { \n            position: \"top-center\",\n          })\n        } else \n        if( existingItem){ \n          state.cartItems[existingItemIndex] = {\n            ...state.cartItems[existingItemIndex],\n            cartQuantity: state.cartItems[existingItemIndex].cartQuantity += 1,\n          };\n          toast.info(`${payload.product.name} quantity increased`, {\n            position: \"top-center\",\n          })\n        }\n      } \n      else {\n        let tempProductItem = { ...payload.product, cartQuantity: 1, imageIndex: 0,selectedAttributes:payload.attribute };\n        state.cartItems.push(tempProductItem);\n        toast.success(`${payload.product.name} added  to cart`, {\n          position: \"top-center\",\n        })\n      }\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n    \n    decreaseCart(state, {payload, type}) {\n      const itemIndex = state.cartItems.findIndex(\n        (item:any) => item.id === payload.product.id && compareItemAttributes(item.selectedAttributes,payload.attribute)\n        );\n\n      if (state.cartItems[itemIndex].cartQuantity > 1) {\n        state.cartItems[itemIndex].cartQuantity -= 1;\n\n        toast.info(`${payload.name} quantity decreased in cart`, {\n          position: \"top-center\",\n      })\n      } else if (state.cartItems[itemIndex].cartQuantity === 1) {\n        // const nextCartItems = state.cartItems.filter(\n        //   (item:any) => item.id !== payload.product.id && compareItemAttributes(item.selectedAttributes,payload.attribute)\n        // );\n\n        // state.cartItems = nextCartItems;\n        state.cartItems.pop(state.cartItems[itemIndex])\n\n        toast.error(`${payload.name} removed from cart`, {\n          position: \"top-center\",\n        })\n      }\n      \n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n    getTotals(state) {\n      let totalPrice = 0;\n      let total = 0\n\n      let { quantity } = state.cartItems.reduce(\n        (cartTotal:any, cartItem:any) => {\n          const {cartQuantity } = cartItem;\n          cartTotal.quantity += cartQuantity;       \n          return cartTotal;\n        },\n        {\n          quantity: 0,\n        }\n        );\n        state.cartItems.forEach((i: any) => {\n          const pricesProxy = JSON.parse(JSON.stringify(i.prices))\n          const amount = pricesProxy.filter((x: any) => x.currency.symbol === localStorage.getItem(\"currency\"))[0]\n          total += amount.amount * i.cartQuantity\n        })\n        totalPrice = parseFloat(total.toFixed(2));\n        state.cartTotalAmount = totalPrice;\n        state.cartTotalQuantity = quantity;\n      },\n\n      changeImageIndexUp(state, {payload,type}) {\n        const existingIndex = state.cartItems.findIndex(\n          (item:any) => item.id === payload.id\n        );\n        \n        if (existingIndex >= 0) {\n         if(state.cartItems[existingIndex].imageIndex === (payload.gallery.length-1)){\n           state.cartItems[existingIndex].imageIndex = 0\n         }\n         else if(state.cartItems[existingIndex].imageIndex >= 0){\n           state.cartItems[existingIndex].imageIndex += 1\n         }\n        }\n  \n      },\n\n      changeImageIndexDown(state, {payload,type}) {\n        const existingIndex = state.cartItems.findIndex(\n          (item:any) => item.id === payload.id\n        );\n        if (existingIndex >= 0) {\n         if(state.cartItems[existingIndex].imageIndex > 0){\n           state.cartItems[existingIndex].imageIndex -= 1\n         }\n         else if(state.cartItems[existingIndex].imageIndex === 0){\n          state.cartItems[existingIndex].imageIndex = (payload.gallery.length-1)\n        }\n        }\n  \n      },\n  }\n});\n\nexport const { addToCart, decreaseCart,  getTotals, changeImageIndexUp, changeImageIndexDown } =\n  cartSlice.actions;\n\nexport default cartSlice.reducer;"]},"metadata":{},"sourceType":"module"}