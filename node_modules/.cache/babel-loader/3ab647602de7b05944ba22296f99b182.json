{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nconst initialState = {\n  cartItems: localStorage.getItem(\"cartItems\") ? JSON.parse(localStorage.getItem(\"cartItems\")) : [],\n  cartTotalQuantity: 0,\n  cartTotalAmount: \"\"\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart: (state, _ref) => {\n      let {\n        payload,\n        type\n      } = _ref;\n      const existingIndex = state.cartItems.findIndex(item => item.id === payload.id);\n\n      if (existingIndex >= 0) {\n        state.cartItems[existingIndex] = { ...state.cartItems[existingIndex],\n          cartQuantity: state.cartItems[existingIndex].cartQuantity += 1\n        };\n        toast.info(`${payload.name} quantity increased`, {\n          position: \"top-center\"\n        });\n      } else {\n        let attr = payload.attributes.map(x => x);\n        const atV = attr.forEach(x => {\n          return x[0];\n        });\n        console.log(atV);\n        let tempProductItem = { ...payload,\n          cartQuantity: 1,\n          imageIndex: 0,\n          selectedAttribute: atV\n        };\n        state.cartItems.push(tempProductItem);\n        toast.success(`${payload.name} added to cart`, {\n          position: \"top-center\"\n        });\n      }\n\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n\n    decreaseCart(state, _ref2) {\n      let {\n        payload,\n        type\n      } = _ref2;\n      const itemIndex = state.cartItems.findIndex(item => item.id === payload.id);\n\n      if (state.cartItems[itemIndex].cartQuantity > 1) {\n        state.cartItems[itemIndex].cartQuantity -= 1;\n        toast.info(`${payload.name} quantity decreased in cart`, {\n          position: \"top-center\"\n        });\n      } else if (state.cartItems[itemIndex].cartQuantity === 1) {\n        const nextCartItems = state.cartItems.filter(item => item.id !== payload.id);\n        state.cartItems = nextCartItems;\n        toast.error(`${payload.name} removed from cart`, {\n          position: \"top-center\"\n        });\n      }\n\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n\n    getTotals(state) {\n      let totalPrice = 0;\n      let total = 0;\n      let currencySymbol = \"\";\n      let {\n        quantity\n      } = state.cartItems.reduce((cartTotal, cartItem) => {\n        const {\n          cartQuantity\n        } = cartItem;\n        cartTotal.quantity += cartQuantity;\n        return cartTotal;\n      }, {\n        quantity: 0\n      });\n      state.cartItems.forEach(i => {\n        const pricesProxy = JSON.parse(JSON.stringify(i.prices));\n        const amount = pricesProxy.filter(x => x.currency.label === localStorage.getItem(\"currency\"))[0];\n        total += amount.amount * i.cartQuantity;\n        currencySymbol = amount.currency.symbol;\n      });\n      totalPrice = parseFloat(total.toFixed(2));\n      state.cartTotalAmount = currencySymbol + totalPrice;\n      state.cartTotalQuantity = quantity;\n    },\n\n    selectAttribute(state, _ref3) {\n      let {\n        payload\n      } = _ref3;\n      console.log(payload.product);\n      const existingIndex = state.cartItems.findIndex(item => {\n        var _payload$product$item;\n\n        return item.id === ((_payload$product$item = payload.product.item) === null || _payload$product$item === void 0 ? void 0 : _payload$product$item.id);\n      });\n      const item = state.cartItems.map(item => {\n        var _payload$product$item2;\n\n        return item.id === ((_payload$product$item2 = payload.product.item) === null || _payload$product$item2 === void 0 ? void 0 : _payload$product$item2.id);\n      });\n\n      if (existingIndex >= 0) {\n        if (item) state.cartItems[existingIndex].selectedAttribute.push(payload.product.attr);\n      }\n\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    }\n\n  }\n});\nexport const {\n  addToCart,\n  decreaseCart,\n  getTotals,\n  selectAttribute\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/Users/admin/Documents/product-cart/products-cart/src/redux/cartSlice.ts"],"names":["createSlice","toast","initialState","cartItems","localStorage","getItem","JSON","parse","cartTotalQuantity","cartTotalAmount","cartSlice","name","reducers","addToCart","state","payload","type","existingIndex","findIndex","item","id","cartQuantity","info","position","attr","attributes","map","x","atV","forEach","console","log","tempProductItem","imageIndex","selectedAttribute","push","success","setItem","stringify","decreaseCart","itemIndex","nextCartItems","filter","error","getTotals","totalPrice","total","currencySymbol","quantity","reduce","cartTotal","cartItem","i","pricesProxy","prices","amount","currency","label","symbol","parseFloat","toFixed","selectAttribute","product","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\n\n\nconst initialState = {\n  cartItems: localStorage.getItem(\"cartItems\")\n    ? JSON.parse(localStorage.getItem(\"cartItems\")!)\n    : [],\n  cartTotalQuantity: 0,\n  cartTotalAmount: \"\",\n};\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart: (state, {payload,type}) => {\n      const existingIndex = state.cartItems.findIndex(\n        (item:any) => item.id === payload.id\n      );\n\n      if (existingIndex >= 0) {\n        state.cartItems[existingIndex] = {\n          ...state.cartItems[existingIndex],\n          cartQuantity: state.cartItems[existingIndex].cartQuantity += 1,\n        };\n        toast.info(`${payload.name} quantity increased`, {\n          position: \"top-center\",\n        })\n      } else {\n        let attr = payload.attributes.map((x:any) => x)\n        const atV = attr.forEach((x:any) => {\n          return x[0]\n        })\n        console.log(atV)\n\n        let tempProductItem = { ...payload, cartQuantity: 1, imageIndex: 0, selectedAttribute: atV };\n        state.cartItems.push(tempProductItem);\n        toast.success(`${payload.name} added to cart`, {\n          position: \"top-center\",\n        })\n      }\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n    decreaseCart(state, {payload, type}) {\n      const itemIndex = state.cartItems.findIndex(\n        (item:any) => item.id === payload.id\n      );\n\n      if (state.cartItems[itemIndex].cartQuantity > 1) {\n        state.cartItems[itemIndex].cartQuantity -= 1;\n\n        toast.info(`${payload.name} quantity decreased in cart`, {\n          position: \"top-center\",\n      })\n      } else if (state.cartItems[itemIndex].cartQuantity === 1) {\n        const nextCartItems = state.cartItems.filter(\n          (item:any) => item.id !== payload.id\n        );\n\n        state.cartItems = nextCartItems;\n\n        toast.error(`${payload.name} removed from cart`, {\n          position: \"top-center\",\n        })\n      }\n      \n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n    getTotals(state) {\n      let totalPrice = 0;\n      let total = 0\n      let currencySymbol = \"\"\n\n      let { quantity } = state.cartItems.reduce(\n        (cartTotal:any, cartItem:any) => {\n          const {cartQuantity } = cartItem;\n          cartTotal.quantity += cartQuantity;       \n          return cartTotal;\n        },\n        {\n          quantity: 0,\n        }\n        );\n        state.cartItems.forEach((i: any) => {\n          const pricesProxy = JSON.parse(JSON.stringify(i.prices))\n          const amount = pricesProxy.filter((x: any) => x.currency.label === localStorage.getItem(\"currency\"))[0]\n          total += amount.amount * i.cartQuantity\n          currencySymbol = amount.currency.symbol\n        })\n        totalPrice = parseFloat(total.toFixed(2));\n        state.cartTotalAmount = currencySymbol + totalPrice;\n        state.cartTotalQuantity = quantity;\n      },\n\n      selectAttribute(state, {payload}) {\n        console.log(payload.product)\n        const existingIndex = state.cartItems.findIndex(\n          (item:any) => item.id === payload.product.item?.id\n        ); \n        const item = state.cartItems.map(\n          (item:any) => item.id === payload.product.item?.id\n        );\n        if (existingIndex >= 0) {\n          if(item)\n         state.cartItems[existingIndex].selectedAttribute.push(payload.product.attr)    \n      }\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n        \n      },\n  }\n});\n\nexport const { addToCart, decreaseCart,  getTotals, selectAttribute } =\n  cartSlice.actions;\n\nexport default cartSlice.reducer;"]},"metadata":{},"sourceType":"module"}