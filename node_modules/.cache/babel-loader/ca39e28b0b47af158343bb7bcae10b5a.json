{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nconst initialState = {\n  cartItems: localStorage.getItem(\"cartItems\") ? JSON.parse(localStorage.getItem(\"cartItems\")) : [],\n  cartTotalQuantity: 0,\n  cartTotalAmount: \"\"\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart: (state, _ref) => {\n      let {\n        payload,\n        type\n      } = _ref;\n      console.log(typeof payload.product.prices);\n      const existingIndex = state.cartItems.findIndex(item => item.id === payload.product.id);\n\n      if (existingIndex >= 0) {\n        state.cartItems[existingIndex] = { ...state.cartItems[existingIndex],\n          cartQuantity: state.cartItems[existingIndex].cartQuantity += 1\n        };\n        toast.info(`${payload.product.name} quantity increased`, {\n          position: \"top-center\"\n        });\n      } else {\n        let tempProductItem = { ...payload.product,\n          cartQuantity: 1,\n          imageIndex: 0,\n          selectedAttributes: payload.attr\n        };\n        state.cartItems.push(tempProductItem);\n        toast.success(`${payload.product.name} added to cart`, {\n          position: \"top-center\"\n        });\n      }\n\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n\n    decreaseCart(state, _ref2) {\n      let {\n        payload,\n        type\n      } = _ref2;\n      const itemIndex = state.cartItems.findIndex(item => item.id === payload.id);\n\n      if (state.cartItems[itemIndex].cartQuantity > 1) {\n        state.cartItems[itemIndex].cartQuantity -= 1;\n        toast.info(`${payload.name} quantity decreased in cart`, {\n          position: \"top-center\"\n        });\n      } else if (state.cartItems[itemIndex].cartQuantity === 1) {\n        const nextCartItems = state.cartItems.filter(item => item.id !== payload.id);\n        state.cartItems = nextCartItems;\n        toast.error(`${payload.name} removed from cart`, {\n          position: \"top-center\"\n        });\n      }\n\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n\n    getTotals(state) {\n      let totalPrice = 0;\n      let total = 0;\n      let currencySymbol = \"\";\n      let {\n        quantity\n      } = state.cartItems.reduce((cartTotal, cartItem) => {\n        const {\n          cartQuantity\n        } = cartItem;\n        cartTotal.quantity += cartQuantity;\n        return cartTotal;\n      }, {\n        quantity: 0\n      });\n      state.cartItems.forEach(i => {\n        const pricesProxy = JSON.parse(JSON.stringify(i.prices));\n        const amount = pricesProxy.filter(x => x.currency.label === localStorage.getItem(\"currency\"))[0];\n        total += amount.amount * i.cartQuantity;\n        currencySymbol = amount.currency.symbol;\n      });\n      totalPrice = parseFloat(total.toFixed(2));\n      state.cartTotalAmount = currencySymbol + totalPrice;\n      state.cartTotalQuantity = quantity;\n    } // selectAttribute(state, {payload}) {\n    //   console.log(payload.product)\n    //   const existingIndex = state.cartItems.findIndex(\n    //     (item:any) => item.id === payload.product.item?.id\n    //   ); \n    //   const item = state.cartItems.map(\n    //     (item:any) => item.id === payload.product.item?.id\n    //   );\n    //   if (existingIndex >= 0) {\n    //     if(item)\n    //    state.cartItems[existingIndex].selectedAttribute.push(payload.product.attr)    \n    // }\n    // localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    // },\n\n\n  }\n});\nexport const {\n  addToCart,\n  decreaseCart,\n  getTotals\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/Users/admin/Documents/product-cart/products-cart/src/redux/cartSlice.ts"],"names":["createSlice","toast","initialState","cartItems","localStorage","getItem","JSON","parse","cartTotalQuantity","cartTotalAmount","cartSlice","name","reducers","addToCart","state","payload","type","console","log","product","prices","existingIndex","findIndex","item","id","cartQuantity","info","position","tempProductItem","imageIndex","selectedAttributes","attr","push","success","setItem","stringify","decreaseCart","itemIndex","nextCartItems","filter","error","getTotals","totalPrice","total","currencySymbol","quantity","reduce","cartTotal","cartItem","forEach","i","pricesProxy","amount","x","currency","label","symbol","parseFloat","toFixed","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\n\n\nconst initialState = {\n  cartItems: localStorage.getItem(\"cartItems\")\n    ? JSON.parse(localStorage.getItem(\"cartItems\")!)\n    : [],\n  cartTotalQuantity: 0,\n  cartTotalAmount: \"\",\n};\n\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart: (state, {payload,type}) => {\n      console.log(typeof payload.product.prices)\n      const existingIndex = state.cartItems.findIndex(\n        (item:any) => item.id === payload.product.id\n      );\n\n      if (existingIndex >= 0) {\n        state.cartItems[existingIndex] = {\n          ...state.cartItems[existingIndex],\n          cartQuantity: state.cartItems[existingIndex].cartQuantity += 1,\n        };\n        toast.info(`${payload.product.name} quantity increased`, {\n          position: \"top-center\",\n        })\n      } else {\n        let tempProductItem = { ...payload.product, cartQuantity: 1, imageIndex: 0,selectedAttributes:payload.attr };\n        state.cartItems.push(tempProductItem);\n        toast.success(`${payload.product.name} added to cart`, {\n          position: \"top-center\",\n        })\n      }\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n    decreaseCart(state, {payload, type}) {\n      const itemIndex = state.cartItems.findIndex(\n        (item:any) => item.id === payload.id\n      );\n\n      if (state.cartItems[itemIndex].cartQuantity > 1) {\n        state.cartItems[itemIndex].cartQuantity -= 1;\n\n        toast.info(`${payload.name} quantity decreased in cart`, {\n          position: \"top-center\",\n      })\n      } else if (state.cartItems[itemIndex].cartQuantity === 1) {\n        const nextCartItems = state.cartItems.filter(\n          (item:any) => item.id !== payload.id\n        );\n\n        state.cartItems = nextCartItems;\n\n        toast.error(`${payload.name} removed from cart`, {\n          position: \"top-center\",\n        })\n      }\n      \n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n    getTotals(state) {\n      let totalPrice = 0;\n      let total = 0\n      let currencySymbol = \"\"\n\n      let { quantity } = state.cartItems.reduce(\n        (cartTotal:any, cartItem:any) => {\n          const {cartQuantity } = cartItem;\n          cartTotal.quantity += cartQuantity;       \n          return cartTotal;\n        },\n        {\n          quantity: 0,\n        }\n        );\n        state.cartItems.forEach((i: any) => {\n          const pricesProxy = JSON.parse(JSON.stringify(i.prices))\n          const amount = pricesProxy.filter((x: any) => x.currency.label === localStorage.getItem(\"currency\"))[0]\n          total += amount.amount * i.cartQuantity\n          currencySymbol = amount.currency.symbol\n        })\n        totalPrice = parseFloat(total.toFixed(2));\n        state.cartTotalAmount = currencySymbol + totalPrice;\n        state.cartTotalQuantity = quantity;\n      },\n\n      // selectAttribute(state, {payload}) {\n      //   console.log(payload.product)\n      //   const existingIndex = state.cartItems.findIndex(\n      //     (item:any) => item.id === payload.product.item?.id\n      //   ); \n      //   const item = state.cartItems.map(\n      //     (item:any) => item.id === payload.product.item?.id\n      //   );\n      //   if (existingIndex >= 0) {\n      //     if(item)\n      //    state.cartItems[existingIndex].selectedAttribute.push(payload.product.attr)    \n      // }\n      // localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n        \n      // },\n  }\n});\n\nexport const { addToCart, decreaseCart,  getTotals } =\n  cartSlice.actions;\n\nexport default cartSlice.reducer;"]},"metadata":{},"sourceType":"module"}